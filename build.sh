#!/bin/bash

scriptDir="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
projectDir=${scriptDir}
libName="notesnative"
libBuildDir=${projectDir}/build/lib
systemBuildDir=${libBuildDir}/system
androidBuildDir=${libBuildDir}/android
iosBuildDir=${libBuildDir}/ios
iosFrameworkDir=${iosBuildDir}/framework
iosFrameworkFileName=${libName}.framework
iosUniversalFrameworkDir=${iosFrameworkDir}/universal

function notify_uncorrect_usage() {
    cat <<EOF
Supported args:
--system
--android
--ios
EOF
    exit 1
}

function system() {
    echo "Building shared lib for this system..."
    cmake ${projectDir} -B${systemBuildDir} \
        -DCMAKE_C_COMPILER=${CC} \
        -DCMAKE_CXX_COMPILER=${CXX} \
        -DENABLE_TESTS=OFF
    (cd ${systemBuildDir} && make build-lib)
}

function android() {
    if [[ -z "${ANDROID_NDK}" ]]; then
        echo "The environment variable ANDROID_NDK must be set before building the library for Android."
        exit 1
    fi

    local abis=(armeabi-v7a arm64-v8a x86 x86_64)
    for abi in "${abis[@]}"; do
        build_android_abi ${abi}
    done
}

function build_android_abi() {
    local abi=$1
    local abiBuildDir=${androidBuildDir}/${abi}
    echo "Building Android shared lib for ABI $abi..."
    cmake ${projectDir} -B${abiBuildDir} \
        -DENABLE_TESTS=OFF \
        -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK}/build/cmake/android.toolchain.cmake \
        -DCMAKE_SYSTEM_NAME=Android \
        -DANDROID_PLATFORM=android-16 \
        -DANDROID_TOOLCHAIN=${CC} \
        -DANDROID_ABI=${abi}

    (cd ${abiBuildDir} && make build-lib)
}

function ios() {
    if [[ ! -x "$(command -v xcodebuild)" ]]; then
        echo "Xcode must be installed before building the library for iOS."
        exit 1
    fi

    echo "Building iOS shared lib..."
    cmake ${projectDir} -B${iosBuildDir} -GXcode \
        -DENABLE_TESTS=OFF \
        -DCMAKE_SYSTEM_NAME=iOS \
        -DCMAKE_OSX_DEPLOYMENT_TARGET=9.3

    build_universal_framework

    local libFilePath=${iosUniversalFrameworkDir}/${iosFrameworkFileName}
    if [[ ! -z "${PREBUILT_LIBS}" ]]; then
        local libSymPath=${PREBUILT_LIBS}/${libName}/ios
        echo "Symlinking the iOS library from \"${libFilePath}\" to \"${libSymPath}\""
        mkdir -p "$libSymPath"
        ln -sf ${libFilePath} ${libSymPath}
    fi
}

function build_universal_framework() {
    local universalFramework=${iosUniversalFrameworkDir}/${iosFrameworkFileName}

    build_framework_for_sdk iphoneos
    build_framework_for_sdk iphonesimulator

    local phoneFramework=${iosFrameworkDir}/iphoneos/${iosFrameworkFileName}
    local simulatorFramework=${iosFrameworkDir}/iphonesimulator/${iosFrameworkFileName}

    rm -rf ${iosUniversalFrameworkDir}
    mkdir -p ${iosUniversalFrameworkDir}

    # Copy the files from the iphoneos framework to the universal one.
    cp -r ${phoneFramework}/. ${universalFramework}

    # Create the universal framework using the simulator and the phone framework.
    lipo ${simulatorFramework}/${libName} ${phoneFramework}/${libName} -create -output ${universalFramework}/${libName} | echo

    # Change the install name of the framework to avoid absolute paths.
    install_name_tool -id "@rpath/${iosFrameworkFileName}/$libName" ${universalFramework}/${libName}
}

function build_framework_for_sdk() {
    local sdk=$1

    # The target generated by CMake for ios is "lib-ios".
    (cd ${iosBuildDir} && xcodebuild -target lib-ios \
        -configuration "Release" \
        -UseModernBuildSystem=NO \
        -sdk ${sdk} \
        CONFIGURATION_BUILD_DIR=${iosFrameworkDir}/${sdk} \
        clean \
        build)

    if [[ $? != 0 ]]; then
        exit 1
    fi
}

system=$1
[[ -z "$system" ]] && notify_uncorrect_usage

case $system in
"--system")
    system
    ;;
"--android")
    android
    ;;
"--ios")
    ios
    ;;
*)
    notify_uncorrect_usage
    ;;
esac
